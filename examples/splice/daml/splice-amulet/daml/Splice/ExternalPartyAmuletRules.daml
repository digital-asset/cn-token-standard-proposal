-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

{-# LANGUAGE MultiWayIf #-}
module Splice.ExternalPartyAmuletRules where

import Canton.Network.RC1.TokenMetadata
import Canton.Network.RC2.Holding qualified as RC2
import Canton.Network.RC3.TransferInstruction qualified as TransferInstruction
import Canton.Network.RC4.Allocation
import Canton.Network.RC6.AllocationInstruction
import Splice.Amulet
import Splice.AmuletAllocation
import Splice.AmuletRules
import Splice.Types
import Splice.Util

import DA.Exception

-- | Rules contract that can be used in transactions that require signatures
-- from an external party. This is intended to get archived and recreated as rarely as possible
-- to support long delays between preparing and signing a transaction.
template ExternalPartyAmuletRules
  with
    dso : Party
  where
    signatory dso

    -- This choice is not guarded by any resource consumption other than the traffic required to pay for the submission of the exercising of this choice.
    -- If this is being abused the DSO party can blacklist (or rate limit) the submitting participant node.
    nonconsuming choice ExternalPartyAmuletRules_CreateTransferCommand : ExternalPartyAmuletRules_CreateTransferCommandResult
      with
        sender : Party
        receiver : Party
        delegate : Party
        amount : Decimal
        expiresAt : Time
        nonce : Int
      controller sender
      do cmd <- create TransferCommand with
           dso
           sender
           receiver
           delegate
           amount
           -- We cannot enforce a max expiry as we cannot call getTime.
           expiresAt
           nonce
         pure (ExternalPartyAmuletRules_CreateTransferCommandResult cmd)

    interface instance TransferInstruction.TransferFactory for ExternalPartyAmuletRules where
      view = TransferInstruction.TransferFactoryView with
        admin = dso

      transferFactory_transferImpl = transferImpl

    interface instance AllocationFactory for ExternalPartyAmuletRules where
      view = AllocationFactoryView with
        admin = dso

      allocationFactory_allocateImpl allocation = sharedAllocateImpl allocation.transfer.sender allocation

    interface instance AllocationDelegationFactory for ExternalPartyAmuletRules where
      view = AllocationFactoryView with
        admin = dso

      allocationDelegationFactory_delegate = sharedAllocateViaDelegateImpl

data ExternalPartyAmuletRules_CreateTransferCommandResult = ExternalPartyAmuletRules_CreateTransferCommandResult
  with
    transferCommandCid : ContractId TransferCommand
  deriving (Show, Eq)

-- | A contract tracking the number of completed TransferCommands per sender,
-- which is used to determine the nonces used in TransferCommands for deduplication.
template TransferCommandCounter
  with
    dso : Party
    sender : Party
    nextNonce : Int
  where
    signatory dso
    observer sender

instance HasCheckedFetch TransferCommandCounter ForOwner where
  contractGroupId TransferCommandCounter{..} =
    ForOwner with
      owner = sender
      dso

-- | One-time delegation to execute a transfer to the given receiver
-- for the given amount.
--
-- We externally sign this instead of the transfer itself to support a longer delay between
-- prepare/execute which would be prevented by signing the transfer directly as that one pins
-- down the mining rounds that are relatively short lived and relies on `getTime` which
-- means it would fail due to the max allowed skew between ledger effective time and record
-- time.
template TransferCommand
  with
    dso : Party
    sender : Party
    receiver : Party
    delegate : Party -- ^ The delegate that actually executes the transfer
    amount : Decimal
    expiresAt : Time -- ^ Expiry of the command until when TransferCommand_Send must be called
    nonce : Int
      -- ^ Expected nonce value to order and deduplicate concurrent transfers.
      -- Starts at 0 and the next value to use can then be read from TransferCommandCounter and the in-flight TransferCommand contracts.
  where
    -- The DSO party is a signatory to make sure
    -- that the external signature
    -- is visible to the SVs.
    signatory sender, dso
    observer delegate

    choice TransferCommand_Send : TransferCommand_SendResult
      with
        context : PaymentTransferContext
        inputs : [TransferInput]
        -- The delegate is expected to select inputs that cover the amount being transferred, provided they exist.
        -- Otherwise the transfer will fail.
        transferPreapprovalCidO : Optional (ContractId TransferPreapproval)
        -- Unspecified if the transfer preapproval does not exist. The transfer command will get rejected in that case
        transferCounterCid : ContractId TransferCommandCounter
      controller delegate
      do transferCounter <- fetchChecked (ForOwner with owner = sender, dso) transferCounterCid

         let mergeInputsAndReportError error = do
             -- In the absence of automatic merging of inputs for external parties, it is possible for
             -- a user to accumulate tons of small amulet holdings and be unable to do a transfer.
             -- We do a self-transfer to merge inputs even in case of a failed transfer to guard against this.
             _ <- fetchChecked (ForDso dso) context.amuletRules
             _ <- exercisePaymentTransfer context Transfer with
               sender
               provider = delegate
               inputs = inputs
               outputs = []
             pure (TransferCommandResultFailure error)

         if | transferCounter.nextNonce > nonce ->
              -- Fail but archive the TransferCommand
              pure TransferCommand_SendResult with
                result = TransferCommandResultFailure $ ITR_Other $ "Expected nonce " <> show nonce <> " is smaller than current counter " <> show transferCounter.nextNonce
                sender
                nonce
            | transferCounter.nextNonce < nonce ->
              -- Fail but don't archive the command so it can be retried
              abort ("Expected nonce " <> show nonce <> " is bigger than current counter " <> show transferCounter.nextNonce)
            | otherwise -> do
              -- Consider the nonce spent independent of whether funds get transferred or not.
              -- Thereby ensuring that transfer instructions get executed promptly.
              -- Clients are expected to retry in case their transfer fails unexpectedly.
              _ <- potentiallyUnsafeArchive transferCounterCid
              _ <- create transferCounter with nextNonce = transferCounter.nextNonce + 1
              case transferPreapprovalCidO of
                None ->
                  -- We cannot verify in Daml that the TransferPreapproval actually does not exist.
                  -- For now we trust the DSO delegate to chose correctly. The other SVs can monitor
                  -- this and change the delegate or even remove the SV if it does not operate
                  -- correctly.
                  pure TransferCommand_SendResult with
                    result = TransferCommandResultFailure $ ITR_Other $ "No TransferPreapproval for receiver " <> show receiver
                    sender
                    nonce
                Some transferPreapprovalCid -> do
                  -- Verify that receiver and DSO party match. We don't validate that the reeiver's provider matches
                 -- as changing that should be up to the receiver and not require the sender to resign.
                  _ <- fetchChecked (ForOwner with owner = receiver, dso) transferPreapprovalCid
                  now <- getTime -- This is run by the DSO party where getTime is fine
                  require ("Current time " <> show now <> " is before expiry of TransferCommand " <> show expiresAt) (expiresAt > now)
                  result <-
                    try do
                      TransferPreapproval_SendResult result <- exercise transferPreapprovalCid (TransferPreapproval_Send context inputs amount sender)
                      pure (TransferCommandResultSuccess result)
                    catch
                      (ex : InvalidTransfer) -> mergeInputsAndReportError ex.reason
                      (ex : AnyException) -> mergeInputsAndReportError (ITR_Other $ message ex)
                  pure TransferCommand_SendResult with
                    result
                    sender
                    nonce

    choice TransferCommand_Withdraw : TransferCommand_WithdrawResult
      controller sender
      do pure TransferCommand_WithdrawResult with
           sender
           nonce

    choice TransferCommand_Expire : TransferCommand_ExpireResult
      with
        p : Party
      controller p
      do require "Controller is a stakeholder" (p `elem` stakeholder this)
         now <- getTime
         require "TransferCommand is expired" (expiresAt <= now)
         pure TransferCommand_ExpireResult with
           sender
           nonce

instance HasCheckedFetch TransferCommand ForDso where
  contractGroupId TransferCommand{..} = ForDso dso

data TransferCommand_SendResult = TransferCommand_SendResult
  with
    result : TransferCommandResult
    sender : Party -- Returned to simplify tx log parsing
    nonce : Int -- Returned to simplify tx log parsing
  deriving (Show, Eq)

data TransferCommandResult
  = TransferCommandResultFailure with
      reason : InvalidTransferReason
  | TransferCommandResultSuccess with
      result : TransferResult
  deriving (Show, Eq)

data TransferCommand_WithdrawResult = TransferCommand_WithdrawResult
  with
    sender : Party -- Returned to simplify tx log parsing
    nonce : Int -- Returned to simplify tx log parsing
  deriving (Show, Eq)

data TransferCommand_ExpireResult = TransferCommand_ExpireResult
  with
    sender : Party -- Returned to simplify tx log parsing
    nonce : Int -- Returned to simplify tx log parsing
  deriving (Show, Eq)


-- Token standard support
-------------------------

-- | One-time delegation to execute a transfer to the given receiver
-- for the given amount as part of a delegated transfer from the token standard interface.
template StandardTransferCommand
  with
    dso : Party
    sender : Party
    receiver : Party
    delegate : Party -- ^ The delegate that actually executes the transfer
    amount : Decimal
    transferMeta : Metadata
    amuletCids : [ContractId Amulet]
    expiresAt : Time -- ^ Expiry of the command until when TransferCommand_Send must be called
  where
    -- The DSO party is a signatory to make sure
    -- that the external signature
    -- is visible to the SVs.
    signatory sender, dso
    observer delegate

    interface instance TransferInstruction.TransferInstruction for StandardTransferCommand where
      view = TransferInstruction.TransferInstructionView with
        status = TransferInstruction.TIS_PendingExecution
        meta = emptyMetadata
        transferSpecification = TransferInstruction.TransferSpecification with
          holdingCids = map toInterfaceContractId amuletCids
          executeBefore = expiresAt
          executionDelegate = Some delegate
          transfer = TransferInstruction.Transfer with
            sender = sender
            receiver = receiver
            amount = amount
            instrumentId = amuletInstrumentId dso
            lock = None
            metadata = transferMeta

      transferInstruction_reportSuccessImpl _ =
        fail "The amulet implementation of TransferInstruction does not make use of the reportSuccess choice"

      transferInstruction_abortImpl actor _extraArgs = do
        require "Actor is sender, DSO, or delegate" (actor `elem` [sender, dso, delegate])
        pure ChoiceExecutionMetadata with
          meta = emptyMetadata

      transferInstruction_executeDelegatedTransferImpl extraHoldings extraArgs = do
        -- NOTE: we are not collecting extra rewards; and we are also not merging inputs
        now <- getTime
        require "Not expired" (now < expiresAt)
        -- compute transfer inputs
        transferInputs <-
          if null amuletCids
            then pure [ InputAmulet (fromInterfaceContractId holding) | holding <- extraHoldings ]
            else do
              require "No extra holdings amulet specified for a transfer with fixed holdings" (null extraHoldings)
              pure [ InputAmulet amuletCid | amuletCid <- amuletCids ]
        -- fetch payment context (incl. featured app right)
        paymentContext <- paymentFromChoiceContext extraArgs.context
        -- fetch the pre-approval
        preapprovalCid <- getContextContractId @TransferPreapproval extraArgs.context "splice.lfdecentralizedtrust.org/transfer-preapproval"
        preapproval <- fetchChecked (ForOwner with dso = dso; owner = receiver) preapprovalCid
        -- and do the transfer
        _ <- exercise preapprovalCid TransferPreapproval_Send
          with
            sender
            context = paymentContext
            inputs = transferInputs
            amount
        -- TODO: report the holding that was created
        pure ChoiceExecutionMetadata with meta = emptyMetadata

sharedAllocateViaDelegateImpl : AllocationView -> Party -> ExtraArgs -> Update AllocationDelegationFactory_DelegateResult
sharedAllocateViaDelegateImpl allocation delegate _extraArgs = do
  instrCid <- create AmuletAllocationDelegation with allocation, delegate
  pure AllocationDelegationFactory_DelegateResult with
    instruction = toInterfaceContractId instrCid
    meta = emptyMetadata

sharedAllocateImpl : Party -> AllocationView -> [ContractId RC2.Holding] -> ExtraArgs -> Update AllocationFactory_AllocateResult
sharedAllocateImpl provider allocation holdings extraArgs = do
  paymentContext <- paymentFromChoiceContext extraArgs.context
  let transferInputs = [ InputAmulet (coerceContractId holding) | holding <- holdings ]
  allocCid <- fundAllocation provider allocation paymentContext transferInputs
  pure AllocationFactory_AllocateResult with
    allocationOrInstruction = AOI_Allocation with allocation = allocCid
    meta = emptyMetadata

transferImpl : TransferInstruction.TransferSpecification -> ExtraArgs -> Update TransferInstruction.TransferFactory_TransferResult
transferImpl transferSpec extraArgs = do
  -- TODO(#115): check `dso` correspondence with transfer instrument
  let transfer = transferSpec.transfer
  let holdings = transferSpec.holdingCids
  case transferSpec.executionDelegate of
    Some delegate -> do
      commandId <- create StandardTransferCommand with
        dso = transfer.instrumentId.admin
        sender = transfer.sender
        receiver = transfer.receiver
        delegate = delegate
        amount = transfer.amount
        amuletCids = map fromInterfaceContractId holdings
        expiresAt = transferSpec.executeBefore
        transferMeta = transfer.metadata
      pure TransferInstruction.TransferFactory_TransferResult with
        optTransferInstructionCid = Some (toInterfaceContractId commandId)
        meta = emptyMetadata
    None -> do
      now <- getTime
      require "Transfer must be executed before expiry" (now < transferSpec.executeBefore)
      require "Holdings must be specified when transferring without a delegate"
        (not $ null transferSpec.holdingCids)
      paymentContext <- paymentFromChoiceContext extraArgs.context
      let transferInputs = [ InputAmulet (coerceContractId holding) | holding <- holdings ]
      preapprovalCid <- getContextContractId @TransferPreapproval extraArgs.context "splice.lfdecentralizedtrust.org/transfer-preapproval"
      preapproval <- fetchChecked (ForOwner with dso = transfer.instrumentId.admin; owner = transfer.receiver) preapprovalCid
      require "Preapproval receiver matches transfer receiver" (preapproval.receiver == transfer.receiver)
      _ <- exercise preapprovalCid TransferPreapproval_Send
        with
          sender = transfer.sender
          context = paymentContext
          inputs = transferInputs
          amount = transfer.amount
      pure TransferInstruction.TransferFactory_TransferResult with
        optTransferInstructionCid = None
        meta = emptyMetadata

