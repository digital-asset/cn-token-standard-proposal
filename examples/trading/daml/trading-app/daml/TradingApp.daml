-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | OTC Trading venue example templates.
module TradingApp where

import Canton.Network.RC1.TokenMetadata as RC1
import Canton.Network.RC3.TransferInstruction as RC3
import Canton.Network.RC4.Allocation as Allocation
import Canton.Network.RC5.AllocationRequest
import DA.Optional (fromOptional)
import DA.Set as Set

template TradingAgreement with
    venue : Party
    user : Party
  where
    signatory venue, user

    nonconsuming choice TradingAgreement_ProposeTrade : ContractId OTCTradeProposal
      with
        transfers : [RC3.Transfer]
      controller user
      do
        create OTCTradeProposal with
          venue
          tradeCid = None
          transfers
          approvers = Set.singleton user

template OTCTradeProposal with
    venue : Party
    tradeCid : Optional (ContractId OTCTradeProposal) -- Tracking-id for the trade being proposed. Set to None for new trades.
    transfers : [RC3.Transfer]
    approvers : Set.Set Party -- ^ Parties that have approved the proposal
  where
    signatory venue, approvers
    observer tradingParties transfers

    -- This is test code, so we don't care about the contention here.
    -- Moreover, likely the number of trading parties is going to be low anyways.
    choice OTCTradeProposal_Accept : ContractId OTCTradeProposal
      with
        approver : Party
      controller approver
      do
        let newApprovers = Set.insert approver approvers
        let traders = tradingParties transfers
        require "Approver is a trading party" (approver `Set.member` traders)
        require "Approver is new" (not $ approver `Set.member` approvers)
        create this with
          approvers = newApprovers
          tradeCid = Some (fromOptional self tradeCid)

    choice OTCTradeProposal_Reject : ()
      with
        trader : Party
      controller trader
      do require "Trader is a trading party" (trader `Set.member` tradingParties transfers)

    choice OTCTradeProposal_InitiateSettlement : ContractId OTCTrade
      with
        prepareUntil : Time
        settleBefore : Time
      controller venue
      do
        require "All trading parties have approved" (approvers == tradingParties transfers)
        now <- getTime
        require "Preparation time has not passed" (now < prepareUntil)
        require "Preparation time before settlement time" (prepareUntil < settleBefore)
        create OTCTrade with
          venue
          transfers
          tradeCid = fromOptional self tradeCid
          createdAt = now
          prepareUntil
          settleBefore

tradeAllocations : SettlementInfo -> [RC3.Transfer] -> [AllocationView]
tradeAllocations settlementInfo transfers = do
  (i, transfer) <- zip [0..length transfers] transfers
  pure AllocationView with
    settlement = settlementInfo
    transferId = i
    transfer

template OTCTrade
  with
    venue : Party
    transfers : [RC3.Transfer]
    tradeCid : ContractId OTCTradeProposal
    createdAt : Time
    prepareUntil : Time
    settleBefore : Time
  where
    signatory venue, tradingParties transfers

    choice OTCTrade_Settle : [Allocation_ExecuteTransferResult]
      with
        allocationInstructions : [ContractId Allocation]
        extraArgss : [ExtraArgs]
      controller venue
      do
        -- check timing constraints
        now <- getTime
        require "Preparation time has passed" (now >= prepareUntil) -- TODO: consider early settlement
        require "Settlement deadline has not passed" (now < settleBefore)
        -- validate and execute transfers
        require "There is one context per transfer" (length extraArgss == length transfers)
        require "There is one allocation instruction per transfer" (length allocationInstructions == length transfers)
        let settlementInfo = SettlementInfo with
              executor = venue
              requestedAt = createdAt
              settlementCid = coerceContractId tradeCid
              allocateBefore = prepareUntil
              settleBefore
        let expectedAllocations = tradeAllocations settlementInfo transfers
        forA (zip3 allocationInstructions extraArgss expectedAllocations) \(instrCid, extraArgs, expectedAlloc) -> do
          -- fetch and validate the allocation instruction
          instr <- fetch @Allocation instrCid
          let instrView = view @Allocation instr
          require "Allocation matches expected allocation" (instrView == expectedAlloc)
          exercise instrCid (Allocation_ExecuteTransfer extraArgs)

    interface instance AllocationRequest for OTCTrade where
      view = AllocationRequestView with
        settlement = SettlementInfo with
          executor = venue
          requestedAt = createdAt
          settlementCid = coerceContractId tradeCid
          allocateBefore = prepareUntil
          settleBefore
        transfers
        meta = emptyMetadata


tradingParties : [RC3.Transfer] -> Set.Set Party
tradingParties = foldl (\acc t -> Set.insert t.sender (Set.insert t.receiver acc)) Set.empty

-- | Check whether a required condition is true. If it's not, abort the
-- transaction with a message saying that the requirement was not met.
require : CanAssert m => Text -> Bool -> m ()
require msg invariant =
  assertMsg ("The requirement '" <> msg <> "' was not met.") invariant

