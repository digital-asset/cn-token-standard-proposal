-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | Example script for testing the DvP support of the CN token DvP standard.
module Splice.Scripts.TestCnTokenDvP where

import Daml.Script

import DA.Assert
import DA.Foldable (foldMap)
import DA.List (sortOn)
import DA.Optional (mapOptional)
import DA.Time

import Splice.Util
import Splice.Scripts.Util
import Splice.Amulet

import Canton.Network.RC1.TokenMetadata as RC1
import Canton.Network.RC2.Holding as RC2
import Canton.Network.RC3.TransferInstruction as RC3
import Canton.Network.RC4.Allocation as Allocation
import Canton.Network.RC5.AllocationRequest
import Canton.Network.RC6.AllocationInstruction

import Splice.Scripts.CnTokenTestUtils

import TradingApp hiding (require)
import Util.Disclosure

testDvP : Script ()
testDvP = script do
  DefaultAppWithUsers{..} <- setupDefaultAppWithUsers

  -- get some funds for alice and bob
  tap app alice 1000.0
  tap app bob 1000.0

  -- setup trading venue
  agreementCid <- submitMulti [alice.primaryParty, provider1.primaryParty] [] $ createCmd TradingAgreement with
    venue = provider1.primaryParty
    user = alice.primaryParty

  let amuletId = InstrumentId app.dso "Amulet"
  let mkTransfer sender receiver amount = RC3.Transfer with
        sender
        receiver
        amount
        instrumentId = amuletId
        metadata = emptyMetadata
        lock = None
  let aliceLeg = mkTransfer alice.primaryParty bob.primaryParty 100.0
  -- TODO: use another asset instead of Amulet for Bob, once we have a second asset available in our example
  let bobLeg = mkTransfer bob.primaryParty alice.primaryParty 20.0

  -- alice proposes trade with bob
  proposalCid <- submit alice.primaryParty $ exerciseCmd agreementCid TradingAgreement_ProposeTrade with
    transfers = [aliceLeg, bobLeg]

  -- bob accepts
  proposalCid <- submit bob.primaryParty $ exerciseCmd proposalCid OTCTradeProposal_Accept with
    approver = bob.primaryParty

  -- provider initiates settlement
  now <- getTime

  -- query OpenAPI endpoint to get the instruction factory of the asset to allocate
  settlementCid <- submit provider1.primaryParty $
    exerciseCmd proposalCid OTCTradeProposal_InitiateSettlement with
      prepareUntil = now `addRelTime` hours 1
      settleBefore = now `addRelTime` hours 2


  -- Alice sees the allocation request in her wallet
  [aliceAlloc] <- getRequestedAllocations alice.primaryParty
  aliceAlloc.transfer.amount === 100.0

  -- build choice context that would be provided over the off-ledger API
  (factoryCid, extraArgs, disclosures) <- getAmuletAllocationFactory_AllocateContext app alice

  -- alice accepts allocation request directly via her wallet
  amulets <- queryFilter @Amulet alice.primaryParty (\amulet -> amulet.owner == alice.primaryParty)
  submitWithDisclosures' alice.primaryParty disclosures $ exerciseCmd factoryCid AllocationFactory_Allocate with
    allocation = aliceAlloc
    inputHoldings = map (toInterfaceContractId . fst) amulets
    extraArgs

  -- Bob sees the allocation request in his wallet as well
  [bobAlloc] <- getRequestedAllocations bob.primaryParty
  bobAlloc.transfer.amount === 20.0

  -- build choice context that would be provided over the off-ledger API
  (factoryCid, extraArgs, disclosures) <- getAmuletAllocationDelegationFactory_DelegateContext app alice

  -- bob accepts allocation request using their wallet and delegating to their validator
  submitWithDisclosures' bob.primaryParty disclosures $ exerciseCmd factoryCid AllocationDelegationFactory_Delegate with
    allocation = bobAlloc
    delegate = bobValidator.primaryParty
    extraArgs

  -- bob's validator processes the allocation delegation
  processAmuletAllocationDelegations app provider1 bobValidator

  -- assume the time given to prepare has passed
  passTime (hours 1)

  -- provider completes settlement
  allocations0 <- queryInterface @Allocation provider1.primaryParty
  let allocations =
        sortOn (\(_, alloc) -> (alloc.transferId)) $
        mapOptional (\(x, y) -> (,) x <$> y) allocations0

  -- and... *drumroll*... settle!
  contexts <- forA allocations $ \(allocCid, _) ->
     getAmuletAllocation_ExecuteTransferContext app provider1 allocCid
  let disclosures = foldMap fst contexts
  submitWithDisclosures' provider1.primaryParty disclosures $ exerciseCmd settlementCid OTCTrade_Settle with
    allocationInstructions = map fst allocations
    extraArgss = map snd contexts

  -- TODO: early abortion of settlement, unwinding of expired settlements, etc.
  let ensureAmuletExists amount owner = do
        amulets <- queryFilter @Amulet owner (\amulet -> amulet.owner == owner)
        require ("Amulet of amount " <> show amount <> " exists")
          (any (\(_, amulet) -> amulet.amount.initialAmount == amount) amulets)

  -- check that they received the correct amount of Amulets
  ensureAmuletExists 20.0 alice.primaryParty
  ensureAmuletExists 100.0 bob.primaryParty

  pure ()

getRequestedAllocations : Party -> Script [AllocationView]
getRequestedAllocations p = do
  reqs <- queryInterface @AllocationRequest p
  trace reqs $ pure ()
  let allocs = do
        (_reqCid, Some req) <- reqs
        (tfId, tf) <- zip [0..length req.transfers] req.transfers
        guard (p == tf.sender)
        pure AllocationView with
          settlement = req.settlement
          transferId = tfId
          transfer = tf
  pure allocs
