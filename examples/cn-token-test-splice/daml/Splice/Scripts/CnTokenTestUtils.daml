-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.Scripts.CnTokenTestUtils where

import Daml.Script

import DA.Foldable (forA_)
import DA.Map as Map

import Splice.Scripts.Util
import Splice.Amulet
import Splice.AmuletAllocation
import Splice.AmuletRules
import Splice.ExternalPartyAmuletRules
import Splice.Round

import Canton.Network.RC1.TokenMetadata as RC1
import Canton.Network.RC2.Holding as RC2
import Canton.Network.RC3.TransferInstruction as RC3
import Canton.Network.RC4.Allocation as Allocation
import Canton.Network.RC6.AllocationInstruction

import Util.Disclosure


-- Support code
----------------

getAmuletTransferFactory_TransferContext : AmuletApp -> RC3.TransferSpecification -> Script (ContractId RC3.TransferFactory, ExtraArgs, Disclosures')
getAmuletTransferFactory_TransferContext app transferSpecification = do
  [(extAmuletRulesCid, _)] <- query @ExternalPartyAmuletRules app.dso
  let amuletFactory = toInterfaceContractId @RC3.TransferFactory extAmuletRulesCid
  extAmuletRules <- queryDisclosure' app.dso extAmuletRulesCid
  case transferSpecification.executionDelegate of
    Some _ -> pure (amuletFactory, emptyExtraArgs, extAmuletRules)
    None -> do
      let transfer = transferSpecification.transfer
      -- get the preaaproval for the receiver
      [(preapprovalCid, preapproval)] <- queryFilter @TransferPreapproval transfer.receiver (\preapproval -> preapproval.receiver == transfer.receiver)
      preapprovalDisc <- queryDisclosure' @TransferPreapproval app.dso preapprovalCid
      -- get featured app right for pre-approval provider
      (featuredDiscs, featuredContext) <- getFeaturedAppRightIfExists app preapproval.provider
      let providerUser = AmuletUser with primaryParty = preapproval.provider; userId = app.dsoUser.userId -- TODO(tech-debt): remove this hack by passing parties instead of users
      -- fetch amulet disclosures
      amuletDiscs <- queryAmuletHoldingDisclosures app transferSpecification.holdingCids
      -- massage choice context into shape
      (disclosures, extraArgs0) <- getAmuletTransferChoiceContext app providerUser
      let extraArgs = extraArgs0 with
            context =
              Map.union featuredContext $
              Map.insert "splice.lfdecentralizedtrust.org/transfer-preapproval"
                (AV_ContractId (coerceContractId preapprovalCid))
              extraArgs0.context
      pure (amuletFactory, extraArgs, extAmuletRules <> preapprovalDisc <> disclosures <> featuredDiscs)

getFeaturedAppRightIfExists : AmuletApp -> Party -> Script (Disclosures', ChoiceContext)
getFeaturedAppRightIfExists app provider = do
  appRights <- queryFilter @FeaturedAppRight app.dso (\appRight -> appRight.provider == provider)
  case appRights of
    [] -> pure (mempty, Map.empty)
    (rightCid, _) :: _ -> do
      rightDisc <- queryDisclosure' @FeaturedAppRight app.dso rightCid
      let context = Map.fromList
            [ ("splice.lfdecentralizedtrust.org/featured-app-right" , AV_ContractId (coerceContractId rightCid))
            ]
      pure (rightDisc, context)

-- TODO(#122): deduplicate with getAmuletTransferChoiceContext once we have better infrastructure for choice contexts in place
getStandardTransferCommand_ExecuteTransferContext
  : AmuletApp -> ContractId RC3.TransferInstruction -> RC3.TransferInstruction_ExecuteDelegatedTransfer -> Script (Disclosures', ExtraArgs)
getStandardTransferCommand_ExecuteTransferContext app instructionCid choiceArg = do
  Some cmd <- queryContractId app.dso (fromInterfaceContractId @StandardTransferCommand instructionCid)
  -- attempt to get the preaaproval for the receiver
  [(preapprovalCid, preapproval)] <- queryFilter @TransferPreapproval cmd.receiver
    (\preapproval -> preapproval.receiver == cmd.receiver)
  preapprovalDisc <- queryDisclosure' @TransferPreapproval app.dso preapprovalCid
  let providerUser = AmuletUser with primaryParty = preapproval.provider; userId = app.dsoUser.userId -- TODO(tech-debt): remove this hack by passing parties instead of users
  -- get featured app right for pre-approval provider
  (featuredDiscs, featuredContext) <- getFeaturedAppRightIfExists app preapproval.provider
  let providerUser = AmuletUser with primaryParty = preapproval.provider; userId = app.dsoUser.userId -- TODO(tech-debt): remove this hack by passing parties instead of users
  -- get disclosures for fixed holdings
  amuletDiscs <- queryAmuletDisclosures app cmd.amuletCids
  -- get disclosures for extra holdings
  extraAmuletDiscs <- queryAmuletHoldingDisclosures app (map fromInterfaceContractId choiceArg.extraHoldingCids)
  -- massage choice context into shape
  (disclosures, extraArgs0) <- getAmuletTransferChoiceContext app providerUser
  let extraArgs = extraArgs0 with
        context =
          Map.union featuredContext $
          Map.insert "splice.lfdecentralizedtrust.org/transfer-preapproval"
            (AV_ContractId (coerceContractId preapprovalCid))
          extraArgs0.context
  pure (preapprovalDisc <> disclosures <> amuletDiscs <> extraAmuletDiscs <> featuredDiscs, extraArgs)

getStandardTransferCommand_AbortContext : AmuletApp -> ContractId RC3.TransferInstruction -> RC3.TransferInstruction_Abort -> Script (Disclosures', ExtraArgs)
getStandardTransferCommand_AbortContext _ _ _ = pure (mempty, emptyExtraArgs)

getAmuletAllocationFactory : AmuletApp -> Script (ContractId AllocationFactory, Disclosures')
getAmuletAllocationFactory app = do
  [(extAmuletRulesCid, _)] <- query @ExternalPartyAmuletRules app.dso
  let amuletFactory = toInterfaceContractId @AllocationFactory extAmuletRulesCid
  extAmuletRules <- queryDisclosure' app.dso extAmuletRulesCid
  pure (amuletFactory, extAmuletRules)

-- note: for Amulet the allocation workflow is the same for all allocations
getAmuletAllocationFactory_AllocateContext : AmuletApp -> AmuletUser -> Script (ContractId AllocationFactory, ExtraArgs, Disclosures')
getAmuletAllocationFactory_AllocateContext app user = do
  (amuletFactory, extAmuletRules) <- getAmuletAllocationFactory app
  (disclosures, extraArgs) <- getAmuletTransferChoiceContext app user
  pure (amuletFactory, extraArgs, extAmuletRules <> disclosures)


getAmuletAllocationDelegationFactory_DelegateContext : AmuletApp -> AmuletUser -> Script (ContractId AllocationDelegationFactory, ExtraArgs, Disclosures')
getAmuletAllocationDelegationFactory_DelegateContext app _user = do
  (amuletFactory, extAmuletRules) <- getAmuletAllocationFactory app
  pure (coerceContractId amuletFactory, emptyExtraArgs, extAmuletRules)

getAmuletAllocation_ExecuteTransferContext : AmuletApp -> AmuletUser -> ContractId Allocation -> Script (Disclosures', ExtraArgs)
getAmuletAllocation_ExecuteTransferContext app venue allocCid = do
  (disclosures, extraArgs) <- getAmuletTransferChoiceContext app venue
  Some amuletAlloc <- queryContractId @AmuletAllocation venue.primaryParty (coerceContractId allocCid)
  lockedAmulet <- queryDisclosure' @LockedAmulet app.dso amuletAlloc.lockedAmulet
  pure (lockedAmulet <> disclosures, extraArgs)

getAmuletTransferChoiceContext : AmuletApp -> AmuletUser -> Script (Disclosures', ExtraArgs)
getAmuletTransferChoiceContext app provider1 = do
  context0 <- getPaymentTransferContext app provider1
  amuletRulesD <- queryDisclosure' @AmuletRules app.dso context0.amuletRules
  openRoundD <- queryDisclosure' @OpenMiningRound app.dso context0.context.openMiningRound
  let context = paymentToChoiceContext context0
  let extraArgs = ExtraArgs with
        context
        meta = emptyMetadata
  let disclosures = amuletRulesD <> openRoundD
  pure (disclosures, extraArgs)

queryAmuletDisclosures : AmuletApp -> [ContractId Amulet] -> Script Disclosures'
queryAmuletDisclosures app amuletCids = do
  discs <- forA amuletCids $ \amuletCid -> do
    holding <- queryContractId @Amulet app.dso amuletCid
    queryDisclosure' @Amulet app.dso amuletCid
  pure $ mconcat discs

queryAmuletHoldingDisclosures : AmuletApp -> [ContractId RC2.Holding] -> Script Disclosures'
queryAmuletHoldingDisclosures app = queryAmuletDisclosures app . map (fromInterfaceContractId @Amulet)

processAmuletAllocationDelegations : AmuletApp -> AmuletUser -> AmuletUser -> Script ()
processAmuletAllocationDelegations app venue delegate = do
  cmds <- query @AmuletAllocationDelegation delegate.primaryParty
  context <- getPaymentTransferContextFeaturedApp app venue None -- TODO: query featured app right of venue

  forA_ cmds $ \(cmdCid, cmd) -> do
    let sender = cmd.allocation.transfer.sender
    amulets <- queryFilter @Amulet sender (\amulet -> amulet.owner == sender)
    -- TODO: proper disclosures instead of abusing readAs dso
    submitMulti [delegate.primaryParty] [app.dso] $ exerciseCmd cmdCid AmuletAllocationDelegation_Allocate with
      transferContext = context
      inputs = map (InputAmulet . fst) amulets


