-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | Interfaces to enable wallets to instruct the registry to create allocations.
--
-- The interfaces are meant to be implemented by registries to enable wallets to
-- drive the creation of allocations in a generic way across registries.
module Canton.Network.RC6.AllocationInstruction where

import Canton.Network.RC1.TokenMetadata
import Canton.Network.RC2.Holding
import Canton.Network.RC4.Allocation

-- AllocationInstruction
------------------------

-- | A read-only interface for tracking the status of an allocation instruction (i.e. a request to
-- a Registry to create an `Allocation`).
interface AllocationInstruction where
  viewtype AllocationInstructionView

-- | The status of an allocation instruction.
data AllocationInstructionStatus
  = AIS_PendingAction with
      actor : Party
        -- ^ The party that is expected to take the next action.
      action : Text
        -- ^ The action that the actor is expected to take.
    -- ^ The allocation instruction is pending an action by some actor. This status can be used to report on
    -- the status of registry specific worklows that are required to complete the allocation (e.g., confirmation of OFAC checks).
  | AIS_Failed with
      reason : Text
        -- ^ Human-readable explanation of why the allocation instruction failed.
    -- ^ The allocation instruction failed definitely with the specified reason.
    -- This status can for example be used by registries to signal that the specific transfer
    -- requested violates the rules of the registry.
  deriving (Show, Eq)

-- | View for `AllocationInstruction`.
data AllocationInstructionView = AllocationInstructionView with
    allocation : AllocationView
      -- ^ The allocation that this instruction is for.
    status : AllocationInstructionStatus
      -- ^ The status of the allocation instruction.
    meta : Metadata
      -- ^ Additional metadata specific to the allocation instruction, used for extensibility; e.g., more detailed status information.
  deriving (Show, Eq)


-- AllocationFactory and AllocationDelegationFactory
----------------------------------------------------

-- | View for `AllocationFactory` and `AllocationDelegationFactory`.
data AllocationFactoryView = AllocationFactoryView with
    admin : Party
      -- ^ The party representing the registry app that administers the instruments
      -- for which this allocation factory can be used.
  deriving (Show, Eq)

-- | Contracts implementing `AllocationFactory` are retrieved from the registry app and are
-- used by the wallet to create allocation instructions (or allocations directly).
interface AllocationFactory where
  viewtype AllocationFactoryView

  allocationFactory_allocateImpl : AllocationView -> [ContractId Holding] -> ExtraArgs -> Update AllocationFactory_AllocateResult

  nonconsuming choice AllocationFactory_Allocate : AllocationFactory_AllocateResult
    -- ^ Generic choice for the sender's wallet to allocate the assets to a specific leg of a settlement.
    -- It depends on the registry whether this results in the allocation being created directly
    -- or in an allocation instruction being created instead.
    with
      allocation : AllocationView
        -- ^ The target allocation which should be instructed.
      inputHoldings : [ContractId Holding]
        -- ^ The holdings that SHOULD be used to fund the allocation.
        --
        -- MAY be empty for registries that do not represent their holdings on-ledger; or
        -- for registries that support automatic selection of holdings for allocations.
      extraArgs : ExtraArgs
        -- ^ Additional choice arguments.
    controller allocation.transfer.sender
    do allocationFactory_allocateImpl this allocation inputHoldings extraArgs

-- | A custom type to represent either an allocation or an allocation instruction.
-- Used in favor of `Either` to improve the readability of the code.
data AllocationOrInstruction
  = AOI_Allocation with allocation : ContractId Allocation
  | AOI_Instruction with instruction : ContractId AllocationInstruction
  deriving (Show, Eq)

data AllocationFactory_AllocateResult = AllocationFactory_AllocateResult
  with
    allocationOrInstruction : AllocationOrInstruction
      -- ^ The output allocation or allocation instruction.
    meta : Metadata
      -- ^ Additional metadata specific to the result of the allocation, used for extensibility.
  deriving (Show, Eq)

-- | Contracts implementing `AllocationDelegationFactory` are exposed by the registry and are
-- intended to be used by the sender's wallet to name a delegate that should allocate the assets to
-- the settlement leg.
--
-- Used for cases where the holdings or some context required to perform the actual allocation are
-- changing more quickly than the time taken for the sender to sign the transaction that allocates
-- the assets (e.g., for senders using an external CCSP).
interface AllocationDelegationFactory where
  viewtype AllocationFactoryView

  allocationDelegationFactory_delegate : AllocationView -> Party -> ExtraArgs -> Update AllocationDelegationFactory_DelegateResult

  nonconsuming choice AllocationDelegationFactory_Delegate : AllocationDelegationFactory_DelegateResult
    -- ^ Generic choice for the wallet to name a delegate that should allocate the assets to the leg of the trade.
    with
      allocation : AllocationView
        -- ^ The allocation that this instruction is for.
      delegate : Party
        -- ^ The chosen delegate party.
      extraArgs : ExtraArgs
        -- ^ Additional choice arguments.
    controller allocation.transfer.sender
    do allocationDelegationFactory_delegate this allocation delegate extraArgs

data AllocationDelegationFactory_DelegateResult = AllocationDelegationFactory_DelegateResult
  with
    instruction : ContractId AllocationInstruction
      -- ^ The instruction that was created to allocate the assets.
    meta : Metadata
      -- ^ Additional metadata specific to the result of the allocation, used for extensibility.
  deriving (Show, Eq)

