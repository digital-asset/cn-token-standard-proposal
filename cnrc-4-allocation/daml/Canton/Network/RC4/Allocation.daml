-- Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | This module defines the interface for an `Allocation`, which reflects the allocation of
-- some amout of asset holdings to transfer them as part of an atomic on-ledger
-- settlement requested by an app.
--
-- The expectation is for the registry app to implement this interface in their models, so that
-- apps can execute atomic on-ledger settlements of DvP's and other kinds of trades or payments
-- using instruments managed by that registry.
module Canton.Network.RC4.Allocation where

import Canton.Network.RC1.TokenMetadata
import Canton.Network.RC3.TransferInstruction

-- | The minimal set of information about a settlement that an app would like to execute.
data SettlementInfo = SettlementInfo
  with
    executor : Party
      -- ^ The party that is responsible for executing the settlement.
    settlementCid : AnyContractId
      -- ^ Reference to the contract serving as the identifier for the settlement that
      -- the app would like to execute.
    requestedAt : Time
      -- ^ When the settlement was requested. Provided for display and debugging purposes.
    allocateBefore : Time
      -- ^ Until when (exclusive) the senders are given time to allocate their assets.
      -- This field has a particular relevance with respect to instrument versioning / corporate
      -- actions, in that the settlement pertains to the instrument version resulting from the
      -- processing of all corporate actions falling strictly before the `allocateBefore` time.
    settleBefore : Time
      -- ^ Until when (exclusive) the executor is given time to execute the settlement.
  deriving (Show, Eq)

-- | An allocation of assets to a specific leg of a settlement.
data AllocationView = AllocationView with
    settlement : SettlementInfo
      -- ^ The settlement for whose execution the assets are being allocated.
    transferId : Int
      -- ^ The numeric id of the transfer within the settlement.
    transfer : Transfer
      -- ^ The transfer for which the assets are being allocated.
  deriving (Show, Eq)

-- Allocation
------------------------

-- | The parties that control the allocation and its execution.
allocationControllers : AllocationView -> [Party]
allocationControllers AllocationView{..} = [settlement.executor, transfer.sender, transfer.receiver]

data Allocation_ExecuteTransferResult = Allocation_ExecuteTransferResult
  with
    meta : Metadata
      -- ^ Additional metadata specific to the result of the transfer, used for extensibility.
  deriving (Show, Eq)

data Allocation_CancelResult = Allocation_CancelResult
  with
    meta : Metadata
      -- ^ Additional metadata specific to the result of the cancellation, used for extensibility.
  deriving (Show, Eq)

data Allocation_WithdrawResult = Allocation_WithdrawResult
  with
    meta : Metadata
      -- ^ Additional metadata specific to the result of the withdraw, used for extensibility.
  deriving (Show, Eq)

-- | A contract representing an allocation of assets to a specific leg of a settlement.
interface Allocation where
  viewtype AllocationView

  allocation_executeTransferImpl : ContractId Allocation -> ExtraArgs -> Update Allocation_ExecuteTransferResult
  allocation_cancelImpl : ContractId Allocation -> ExtraArgs -> Update Allocation_CancelResult
  allocation_withdrawImpl : ContractId Allocation -> ExtraArgs -> Update Allocation_WithdrawResult

  nonconsuming choice Allocation_ExecuteTransfer : Allocation_ExecuteTransferResult
    -- ^ Execute the transfer of the allocated assets. Intended to be used to execute the settlement.
    -- This choice SHOULD succeed provided the `settleBefore` deadline has not passed.
    --
    -- Note that this is a non-consuming choice to provide the implementation with maximal flexibility.
    -- Implementations MUST ensure that the choice cannot be executed twice, e.g., by archiving the contract.
    with
      extraArgs : ExtraArgs
        -- ^ Additional context required in order to exercise the choice.
    controller allocationControllers (view this)
    do allocation_executeTransferImpl this self extraArgs

  nonconsuming choice Allocation_Cancel : Allocation_CancelResult
    -- ^ Cancel the allocation. Used by the executor to release the allocated assets early in case the settlement
    -- is aborted or it has definitely failed.
    --
    -- Note that this is a non-consuming choice to provide the implementation with maximal flexibility.
    -- Implementations SHOULD ensure that the choice cannot be executed twice, e.g., by archiving the contract.
    with
      extraArgs : ExtraArgs
        -- ^ Additional context required in order to exercise the choice.
    controller allocationControllers (view this)
    do allocation_cancelImpl this self extraArgs

  nonconsuming choice Allocation_Withdraw : Allocation_WithdrawResult
    -- ^ Withdraw the allocated assets. Used by the sender to withdraw the assets before settlement
    -- was completed. This SHOULD not fail settlement if the sender has still time to allocate the
    -- assets again (we are before the `allocateBefore` time).
    --
    -- Note that this is a non-consuming choice to provide the implementation with maximal flexibility.
    -- Implementations SHOULD ensure that the choice cannot be executed twice, e.g., by archiving the contract.
    with
      extraArgs : ExtraArgs
        -- ^ Additional context required in order to exercise the choice.
    controller (view this).transfer.sender
    do allocation_withdrawImpl this self extraArgs


